{"version":3,"file":"static/js/539.c30b8994.chunk.js","mappings":"+NAgBaA,EAAOC,EAAAA,GAAAA,KAAW,qNAelBC,GALYD,EAAAA,GAAAA,IAAU,gEAKdA,EAAAA,GAAAA,MAAY,iOAItBE,EAAAA,IACP,YAAa,OA7BE,SAACC,GAClB,OAAQA,GACN,IAAK,MACL,IAAK,YAAU,MAAO,cACtB,IAAK,WAAY,MAAO,cACxB,QAAS,MAAO,eAEpB,CAsBwBC,CAAP,EAAVC,WAAuC,KAOjCC,EAAaN,EAAAA,GAAAA,OAAa,6QAORO,EAAAA,GAIIL,EAAAA,IAGtBM,EAAYR,EAAAA,GAAAA,MAAY,6QAONO,EAAAA,GAIIL,EAAAA,IAItBO,EAAmBT,EAAAA,GAAAA,OAAa,iWAO3BE,EAAAA,GASIA,EAAAA,I,oBCjFP,SAASQ,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACTC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,QAAQ,IAA9CH,KACR,GAAwBI,EAAAA,EAAAA,UAASJ,EAAKK,MAAK,eAApCA,EAAI,KAAEC,EAAO,KACpB,GAA0BF,EAAAA,EAAAA,UAASJ,EAAKO,OAAM,eAAvCA,EAAK,KAAEC,EAAQ,KACtB,GAAsBJ,EAAAA,EAAAA,UAASJ,EAAKS,KAAI,eAAjCA,EAAG,KAAEC,EAAM,KAClB,GAAgCN,EAAAA,EAAAA,UAASJ,EAAKW,UAAS,eAAhDA,EAAQ,KACf,GAD4B,MACAP,EAAAA,EAAAA,UAASJ,EAAKY,SAAO,eAA1CA,EAAM,KAAEC,EAAS,KAcxB,OACE,UAAC3B,EAAI,YACH,UAACE,EAAK,CAAC0B,QAAQ,OAAM,UAAC,SAEpB,SAACnB,EAAS,CACRoB,KAAK,OACLV,KAAK,OACLW,MAAOX,EACPY,SAAU,SAACC,GAAC,OAAKZ,EAAQY,EAAEC,OAAOH,MAAM,QAG5C,UAAC5B,EAAK,CAAC0B,QAAQ,QAAO,UAAC,UAErB,SAACnB,EAAS,CACRyB,UAAQ,EACRL,KAAK,QACLV,KAAK,QACLW,MAAOT,EACPU,SAAU,SAACC,GAAC,OAAKV,EAASU,EAAEC,OAAOH,MAAM,QAG7C,UAAC5B,EAAK,CAAC0B,QAAQ,SAAStB,WAAW,YAAQ,UAAC,cAE1C,UAACC,EAAU,CAACuB,MAAOJ,EAAQK,SAAU,SAACC,GAAC,OAAKL,EAAUK,EAAEC,OAAOH,MAAM,EAAC,WACpE,mBACEK,gBAAc,EACdC,QAAM,EACNN,MAAOJ,EAAO,SAEbA,KAEH,mBACEI,MAAM,YAAW,SAClB,eAGD,mBACEA,MAAM,WAAU,SACjB,cAGD,mBACEA,MAAM,WAAU,SACjB,oBAKL,UAAC5B,EAAK,CAAC0B,QAAQ,MAAMtB,WAAW,MAAK,UAAC,QAEpC,SAACG,EAAS,CACRyB,UAAQ,EACRL,KAAK,OACLV,KAAK,MACLW,MAAOP,EACPQ,SAAU,SAACC,GAAC,OAAKR,EAAOQ,EAAEC,OAAOH,MAAM,QAG3C,SAACpB,EAAgB,CAAC2B,QAAS,SAACL,GAAC,OAtEjC,SAAsBA,GACpBA,EAAEM,iBACF1B,EAAS2B,EAAAA,GAAuB,CAC9BC,YAAa,CACXrB,KAAAA,EACAE,MAAAA,EACAE,IAAAA,EACAE,SAAAA,EACAC,OAAAA,KAGN,CA2DsCe,CAAaT,EAAE,EAAC,SAAC,aAGzD,C","sources":["Components/Form/profile/styled.js","Components/Form/profile/index.js"],"sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport styled from 'styled-components';\nimport {\n  grayText, darkRedColor, yellowColor, darkBlueColor, lightGrayColor,\n  darkGrayColor,\n} from '../../../style/colors';\n\nconst InputWidth = (width) => {\n  switch (width) {\n    case 'cpf': return 'width: 40%;';\n    case 'Gênero': return 'width: 40%;';\n    case 'password': return 'width: 50%;';\n    default: return 'width: 100%;';\n  }\n};\n\nexport const Form = styled.form`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: flex-start;\n    align-items: center;\n    margin-top: 15px;\n    min-width: 100%;\n    min-height: 80%;\n    padding: 10px;\n`;\nexport const Container = styled.div`\n   display: flex;\n   flex-wrap: wrap;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  font-weight: bold;\n  font-size: 15px;\n  color: ${darkRedColor};\n  ${({ inputWidth }) => InputWidth(inputWidth)}\n  justify-content: flex-start;\n  align-items: center;\n  margin-right: 5px;\n  margin-left: 10px;\n  padding: 20px;\n  `;\nexport const SelectForm = styled.select`\n    height: 30px;\n    width: 80%;\n    padding-left: 5px;\n    margin-top: 5px;\n    border: none;\n    background: none;\n    border-bottom: 2px solid ${darkGrayColor};\n\n    &:focus{\n        outline: none;\n        border-bottom: 2px solid ${darkRedColor};\n     }\n`;\nexport const InputForm = styled.input`\n    height: 30px;\n    width: 80%;\n    padding-left: 5px;\n    margin-top: 5px;\n    border: none;\n    background: none;\n    border-bottom: 2px solid ${darkGrayColor};\n\n    &:focus{\n        outline: none;\n        border-bottom: 2px solid ${darkRedColor};\n     }\n`;\n\nexport const ButtonSubmitForm = styled.button`\n    width: 50%;\n    height: 55px;\n    font-weight: bold;\n    border-style: none;\n    font-size: 15px;\n    border-radius: 15px;\n    background: ${darkRedColor};\n    color: #fff;\n    position: relative;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: auto;\n    cursor: pointer;\n    :hover{\n        background: ${darkRedColor};\n    }\n`;\n","import { useState, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Form, Label, InputForm, SelectForm, ButtonSubmitForm,\n} from './styled';\nimport * as actionUser from '../../../store/modules/userInfo/actions';\n\nexport default function Profile() {\n  const dispatch = useDispatch();\n  const { user } = useSelector((state) => state.userInfo);\n  const [name, setName] = useState(user.name);\n  const [email, setEmail] = useState(user.email);\n  const [cpf, setCpf] = useState(user.cpf);\n  const [password, setPassword] = useState(user.password);\n  const [gender, setGender] = useState(user.gender);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    dispatch(actionUser.userRequest({\n      userProfile: {\n        name,\n        email,\n        cpf,\n        password,\n        gender,\n      },\n    }));\n  }\n  return (\n    <Form>\n      <Label htmlFor=\"nome\">\n        Nome:\n        <InputForm\n          type=\"text\"\n          name=\"nome\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n      </Label>\n      <Label htmlFor=\"email\">\n        Email:\n        <InputForm\n          disabled\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </Label>\n      <Label htmlFor=\"gender\" inputWidth=\"Gênero\">\n        Gênero:\n        <SelectForm value={gender} onChange={(e) => setGender(e.target.value)}>\n          <option\n            defaultChecked\n            hidden\n            value={gender}\n          >\n            {gender}\n          </option>\n          <option\n            value=\"Masculino\"\n          >\n            Masculino\n          </option>\n          <option\n            value=\"Feminino\"\n          >\n            Feminino\n          </option>\n          <option\n            value=\"Outro...\"\n          >\n            Outro...\n          </option>\n        </SelectForm>\n      </Label>\n      <Label htmlFor=\"cpf\" inputWidth=\"cpf\">\n        CPF:\n        <InputForm\n          disabled\n          type=\"text\"\n          name=\"cpf\"\n          value={cpf}\n          onChange={(e) => setCpf(e.target.value)}\n        />\n      </Label>\n      <ButtonSubmitForm onClick={(e) => handleSubmit(e)}>Salvar</ButtonSubmitForm>\n    </Form>\n  );\n}\n"],"names":["Form","styled","Label","darkRedColor","width","InputWidth","inputWidth","SelectForm","darkGrayColor","InputForm","ButtonSubmitForm","Profile","dispatch","useDispatch","user","useSelector","state","userInfo","useState","name","setName","email","setEmail","cpf","setCpf","password","gender","setGender","htmlFor","type","value","onChange","e","target","disabled","defaultChecked","hidden","onClick","preventDefault","actionUser","userProfile","handleSubmit"],"sourceRoot":""}